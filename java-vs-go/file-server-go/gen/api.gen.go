// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package gen

import (
	openapi_types "github.com/oapi-codegen/runtime/types"
	"github.com/softwareplace/http-utils/api_context"
	"github.com/softwareplace/http-utils/server"
)

// Authorization defines model for Authorization.
type Authorization = Response

// Data defines model for Data.
type Data struct {
	Paths *interface{} `json:"paths,omitempty"`
}

// Response defines model for Response.
type Response struct {
	ErrorInfo *map[string]interface{} `json:"errorInfo,omitempty"`
	Message   string                  `json:"message"`
	Success   bool                    `json:"success"`
	Timestamp int64                   `json:"timestamp"`
}

// UploadFileResponse defines model for UploadFileResponse.
type UploadFileResponse struct {
	ContentType     *string `json:"contentType,omitempty"`
	Extension       *string `json:"extension,omitempty"`
	FileDownloadUri *string `json:"fileDownloadUri,omitempty"`
	FileName        *string `json:"fileName,omitempty"`
	Size            *int64  `json:"size,omitempty"`
}

// UserContent defines model for UserContent.
type UserContent struct {
	AuthToken string `json:"authToken"`
	Password  string `json:"password"`
	Username  string `json:"username"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// AccessToken defines model for AccessToken.
type AccessToken = string

// AuthorizationGenParams defines parameters for AuthorizationGen.
type AuthorizationGenParams struct {
	Authorization AccessToken `json:"Authorization"`
}

// ListParams defines parameters for List.
type ListParams struct {
	Resource      *string     `form:"resource,omitempty" json:"resource,omitempty"`
	Authorization AccessToken `json:"Authorization"`
}

// DownloadFileParams defines parameters for DownloadFile.
type DownloadFileParams struct {
	FilePath string `form:"filePath" json:"filePath"`
}

// UploadFileMultipartBody defines parameters for UploadFile.
type UploadFileMultipartBody struct {
	DirName  string             `json:"dirName"`
	FileName string             `json:"fileName"`
	Resource openapi_types.File `json:"resource"`
}

// UploadFileParams defines parameters for UploadFile.
type UploadFileParams struct {
	Authorization AccessToken `json:"Authorization"`
}

func (rh *requestHandlerImpl[T]) GetAuthorization(ctx *api_context.ApiRequestContext[T]) {

	requestBody := UserInfo{}
	server.GetRequestBody(ctx, requestBody, func(ctx *api_context.ApiRequestContext[T], body UserInfo) {
		rh.Service.GetAuthorizationRequest(body, ctx)
	}, func(ctx *api_context.ApiRequestContext[T], err error) {
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *requestHandlerImpl[T]) AuthorizationGen(ctx *api_context.ApiRequestContext[T]) {

	requestBody := UserInfo{}
	server.GetRequestBody(ctx, requestBody, func(ctx *api_context.ApiRequestContext[T], body UserInfo) {
		rh.Service.AuthorizationGenRequest(body, ctx)
	}, func(ctx *api_context.ApiRequestContext[T], err error) {
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *requestHandlerImpl[T]) List(ctx *api_context.ApiRequestContext[T]) {

	//request := ListRequestParams{}
	// server.PopulateFieldsFromRequest(ctx, &request)
	rh.Service.ListRequest(ctx)

}

func (rh *requestHandlerImpl[T]) DownloadFile(ctx *api_context.ApiRequestContext[T]) {

	//request := DownloadFileRequestParams{}
	// server.PopulateFieldsFromRequest(ctx, &request)
	rh.Service.DownloadFileRequest(ctx)

}

func (rh *requestHandlerImpl[T]) UploadFile(ctx *api_context.ApiRequestContext[T]) {

	requestBody := UploadFileMultipartBody{}
	server.GetRequestBody(ctx, requestBody, func(ctx *api_context.ApiRequestContext[T], body UploadFileMultipartBody) {
		rh.Service.UploadFileRequest(body, ctx)
	}, func(ctx *api_context.ApiRequestContext[T], err error) {
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *requestHandlerImpl[T]) HealthGet(ctx *api_context.ApiRequestContext[T]) {

	//request := HealthGetRequestParams{}
	// server.PopulateFieldsFromRequest(ctx, &request)
	rh.Service.HealthGetRequest(ctx)

}

// GetAuthorizationJSONRequestBody defines body for GetAuthorization for application/json ContentType.
type GetAuthorizationRequest = UserInfo

// AuthorizationGenJSONRequestBody defines body for AuthorizationGen for application/json ContentType.
type AuthorizationGenRequest = UserInfo

// UploadFileMultipartRequestBody defines body for UploadFile for multipart/form-data ContentType.
type UploadFileRequest UploadFileMultipartBody

// RequestHandler represents all server handlers.
type RequestHandler[T api_context.ApiPrincipalContext] interface {
	// Get api access authorization token
	// (POST /authorization)
	GetAuthorization(ctx *api_context.ApiRequestContext[T])
	// Return a user authorization data that can be used to access the api
	// (POST /authorization/gen)
	AuthorizationGen(ctx *api_context.ApiRequestContext[T])
	// List available files from storage path
	// (GET /files)
	List(ctx *api_context.ApiRequestContext[T])
	// Download a file by name
	// (GET /files/download)
	DownloadFile(ctx *api_context.ApiRequestContext[T])
	// Upload a single file
	// (POST /files/upload)
	UploadFile(ctx *api_context.ApiRequestContext[T])
	// Check application status
	// (GET /health)
	HealthGet(ctx *api_context.ApiRequestContext[T])
}

type ServiceRequestHandler[T api_context.ApiPrincipalContext] interface {

	// GetAuthorizationRequest(requestBody UserInfo, requestParams GetAuthorizationRequestParams, ctx *api_context.ApiRequestContext[T])
	GetAuthorizationRequest(requestBody UserInfo, ctx *api_context.ApiRequestContext[T])

	// AuthorizationGenRequest(requestBody UserInfo, requestParams AuthorizationGenRequestParams, ctx *api_context.ApiRequestContext[T])
	AuthorizationGenRequest(requestBody UserInfo, ctx *api_context.ApiRequestContext[T])

	ListRequest(ctx *api_context.ApiRequestContext[T])

	DownloadFileRequest(ctx *api_context.ApiRequestContext[T])

	// UploadFileRequest(requestBody UploadFileMultipartBody, requestParams UploadFileRequestParams, ctx *api_context.ApiRequestContext[T])
	UploadFileRequest(requestBody UploadFileMultipartBody, ctx *api_context.ApiRequestContext[T])

	HealthGetRequest(ctx *api_context.ApiRequestContext[T])
}

type requestHandlerImpl[T api_context.ApiPrincipalContext] struct {
	Service ServiceRequestHandler[T]
}

// ResourcesHandler registers API endpoints from generated code.

// - RequestHandler.GetAuthorization
// - RequestHandler.AuthorizationGen
// - RequestHandler.List
// - RequestHandler.DownloadFile
// - RequestHandler.UploadFile
// - RequestHandler.HealthGet
// Parameters:
//   - apiServer: The API router handler used for setting up routes and middleware.
//   - server: The server interface implementation containing the endpoint handlers.
//
// Generics:
//   - T: A type that satisfies the api_context.ApiPrincipalContext interface, representing the principal/context
//     involved in the API operations.
//
// This function will use the RequestHandler implementation
// that has already been generated to bind specific API routes
// dynamically at runtime, based on the provided security definitions
// and endpoint configurations.
func ResourcesHandler[T api_context.ApiPrincipalContext](apiServer server.ApiRouterHandler[T], service ServiceRequestHandler[T]) {
	handler := &requestHandlerImpl[T]{
		Service: service,
	}
	ApiResourceRegister(apiServer, handler)
}

// ApiResourceRegister is a customizable resource handler that registers API endpoints from generated code.
// This method binds the custom `RequestHandler` implementation to specific API routes,
// allowing dynamic configuration of handlers.
//
// Parameters:
//   - apiServer: The API router handler used for setting up routes and middleware.
//   - handler: The `RequestHandler` interface implementation containing the actual endpoint handlers.
//
// Generics:
//   - T: A type that satisfies the api_context.ApiPrincipalContext interface, representing the principal/context
//     involved in the API operations.
func ApiResourceRegister[T api_context.ApiPrincipalContext](apiServer server.ApiRouterHandler[T], handler RequestHandler[T]) {
	// Initialize an empty string for the merged scopes.
	apiServer.PublicRouter(handler.GetAuthorization, "/authorization", "POST")

	// Initialize an empty string for the merged scopes.
	apiServer.PublicRouter(handler.AuthorizationGen, "/authorization/gen", "POST")

	// Initialize an empty string for the merged scopes.
	apiServer.PublicRouter(handler.List, "/files", "GET")

	// Initialize an empty string for the merged scopes.
	apiServer.PublicRouter(handler.DownloadFile, "/files/download", "GET")

	// Initialize an empty string for the merged scopes.
	apiServer.PublicRouter(handler.UploadFile, "/files/upload", "POST")

	// Initialize an empty string for the merged scopes.
	apiServer.PublicRouter(handler.HealthGet, "/health", "GET")

}

func ApiResourceHandler[T api_context.ApiPrincipalContext](service ServiceRequestHandler[T]) func(handler server.ApiRouterHandler[T]) {
	return func(handler server.ApiRouterHandler[T]) {
		ResourcesHandler(handler, service)
	}
}
