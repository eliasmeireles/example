// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"strings"

	openapi_types "github.com/oapi-codegen/runtime/types"
	log "github.com/sirupsen/logrus"
	goservectx "github.com/softwareplace/goserve/context"
	goserveerror "github.com/softwareplace/goserve/error"
	goservereflect "github.com/softwareplace/goserve/reflect"
	"github.com/softwareplace/goserve/request"
	"github.com/softwareplace/goserve/server"
)

const (
	OAuth2Scopes = "OAuth2.Scopes"
)

// Authorization defines model for Authorization.
type Authorization = Response

// Data defines model for Data.
type Data struct {
	Paths *interface{} `json:"paths,omitempty"`
}

// Response defines model for Response.
type Response struct {
	ErrorInfo *map[string]interface{} `json:"errorInfo,omitempty"`
	Message   string                  `json:"message"`
	Success   bool                    `json:"success"`
	Timestamp int64                   `json:"timestamp"`
}

// UploadFileResponse defines model for UploadFileResponse.
type UploadFileResponse struct {
	ContentType     *string `json:"contentType,omitempty"`
	Extension       *string `json:"extension,omitempty"`
	FileDownloadUri *string `json:"fileDownloadUri,omitempty"`
	FileName        *string `json:"fileName,omitempty"`
	Size            *int64  `json:"size,omitempty"`
}

// UserContent defines model for UserContent.
type UserContent struct {
	AuthToken string `json:"authToken"`
	Password  string `json:"password"`
	Username  string `json:"username"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// AccessToken defines model for AccessToken.
type AccessToken = string

// AuthorizationGenParams defines parameters for AuthorizationGen.
type AuthorizationGenParams struct {
	Authorization AccessToken `json:"Authorization"`
}

// DeleteParams defines parameters for Delete.
type DeleteParams struct {
	FilePath string `form:"filePath" json:"filePath"`
}

// ListParams defines parameters for List.
type ListParams struct {
	Resource      *string     `form:"resource,omitempty" json:"resource,omitempty"`
	Authorization AccessToken `json:"Authorization"`
}

// DownloadFileParams defines parameters for DownloadFile.
type DownloadFileParams struct {
	FilePath string `form:"filePath" json:"filePath"`
}

// UploadFileMultipartBody defines parameters for UploadFile.
type UploadFileMultipartBody struct {
	DirName  string             `json:"dirName"`
	FileName string             `json:"fileName"`
	Resource openapi_types.File `json:"resource"`
}

// UploadFileParams defines parameters for UploadFile.
type UploadFileParams struct {
	Authorization AccessToken `json:"Authorization"`
}

func (rh *resourceHandlerImpl[T]) GetAuthorization(ctx *goservectx.Request[T]) {

	goserveerror.Handler(func() {
		requestBody := UserInfo{}
		request.GetRequestBody(ctx, requestBody, func(ctx *goservectx.Request[T], body UserInfo) {
			clientRequest := GetAuthorizationClientRequest{
				Body: body,
			}

			rh.Service.GetAuthorization(clientRequest, ctx)
		}, func(ctx *goservectx.Request[T], err error) {
			ctx.InternalServerError("Internal server error")
		})
	}, func(err error) {
		log.Errorf("[POST /authorization]:: GetAuthorization result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) AuthorizationGen(ctx *goservectx.Request[T]) {

	goserveerror.Handler(func() {
		requestBody := UserInfo{}
		request.GetRequestBody(ctx, requestBody, func(ctx *goservectx.Request[T], body UserInfo) {
			clientRequest := AuthorizationGenClientRequest{
				Body: body,
			}
			err := ctx.BindRequestParams(&clientRequest)
			contentType := ctx.Request.Header.Get(goservectx.ContentType)
			// Try to load form param to the body struct. File form will be ignored.
			if err == nil && strings.Contains(contentType, goservectx.MultipartFormData) {
				_ = goservereflect.ParamsExtract(&clientRequest.Body,
					goservereflect.ParamsExtractorSource{
						Tree: ctx.FormValues(),
					},
				)
			}
			if err != nil {
				log.Errorf("Failed to bind AuthorizationGenClientRequest request params: %+v", err)
				ctx.Error(err.Error(), err.Code)
				return
			}

			rh.Service.AuthorizationGen(clientRequest, ctx)
		}, func(ctx *goservectx.Request[T], err error) {
			ctx.InternalServerError("Internal server error")
		})
	}, func(err error) {
		log.Errorf("[POST /authorization/gen]:: AuthorizationGen result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) Delete(ctx *goservectx.Request[T]) {

	goserveerror.Handler(func() {

		clientRequest := DeleteClientRequest{}
		err := ctx.BindRequestParams(&clientRequest)
		if err != nil {
			log.Errorf("Failed to bind DeleteClientRequest request params: %+v", err)
			ctx.Error(err.Error(), err.Code)
			return
		}
		rh.Service.Delete(clientRequest, ctx)

	}, func(err error) {
		log.Errorf("[DELETE /files]:: Delete result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) List(ctx *goservectx.Request[T]) {

	goserveerror.Handler(func() {

		clientRequest := ListClientRequest{}
		err := ctx.BindRequestParams(&clientRequest)
		if err != nil {
			log.Errorf("Failed to bind ListClientRequest request params: %+v", err)
			ctx.Error(err.Error(), err.Code)
			return
		}
		rh.Service.List(clientRequest, ctx)

	}, func(err error) {
		log.Errorf("[GET /files]:: List result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) DownloadFile(ctx *goservectx.Request[T]) {

	goserveerror.Handler(func() {

		clientRequest := DownloadFileClientRequest{}
		err := ctx.BindRequestParams(&clientRequest)
		if err != nil {
			log.Errorf("Failed to bind DownloadFileClientRequest request params: %+v", err)
			ctx.Error(err.Error(), err.Code)
			return
		}
		rh.Service.DownloadFile(clientRequest, ctx)

	}, func(err error) {
		log.Errorf("[GET /files/download]:: DownloadFile result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) UploadFile(ctx *goservectx.Request[T]) {

	goserveerror.Handler(func() {
		requestBody := UploadFileMultipartBody{}
		request.GetRequestBody(ctx, requestBody, func(ctx *goservectx.Request[T], body UploadFileMultipartBody) {
			clientRequest := UploadFileClientRequest{
				Body: body,
			}
			err := ctx.BindRequestParams(&clientRequest)
			contentType := ctx.Request.Header.Get(goservectx.ContentType)
			// Try to load form param to the body struct. File form will be ignored.
			if err == nil && strings.Contains(contentType, goservectx.MultipartFormData) {
				_ = goservereflect.ParamsExtract(&clientRequest.Body,
					goservereflect.ParamsExtractorSource{
						Tree: ctx.FormValues(),
					},
				)
			}
			if err != nil {
				log.Errorf("Failed to bind UploadFileClientRequest request params: %+v", err)
				ctx.Error(err.Error(), err.Code)
				return
			}

			rh.Service.UploadFile(clientRequest, ctx)
		}, func(ctx *goservectx.Request[T], err error) {
			ctx.InternalServerError("Internal server error")
		})
	}, func(err error) {
		log.Errorf("[POST /files/upload]:: UploadFile result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

func (rh *resourceHandlerImpl[T]) HealthGet(ctx *goservectx.Request[T]) {

	goserveerror.Handler(func() {

		rh.Service.HealthGet(ctx)

	}, func(err error) {
		log.Errorf("[GET /health]:: HealthGet result with error: %+v", err)
		ctx.InternalServerError("Internal server error")
	})

}

// GetAuthorizationJSONRequestBody defines body for GetAuthorization for application/json ContentType.
type GetAuthorizationRequest = UserInfo

// AuthorizationGenJSONRequestBody defines body for AuthorizationGen for application/json ContentType.
type AuthorizationGenRequest = UserInfo

// UploadFileMultipartRequestBody defines body for UploadFile for multipart/form-data ContentType.
type UploadFileRequest UploadFileMultipartBody

// resourceHandler represents all server handlers.
type resourceHandler[T goservectx.Principal] interface {
	// Get api access authorization token
	// (POST /authorization)
	GetAuthorization(ctx *goservectx.Request[T])
	// Return a user authorization data that can be used to access the api
	// (POST /authorization/gen)
	AuthorizationGen(ctx *goservectx.Request[T])
	// Delete a file or dir by name
	// (DELETE /files)
	Delete(ctx *goservectx.Request[T])
	// List available files from storage path
	// (GET /files)
	List(ctx *goservectx.Request[T])
	// Download a file by name
	// (GET /files/download)
	DownloadFile(ctx *goservectx.Request[T])
	// Upload a single file
	// (POST /files/upload)
	UploadFile(ctx *goservectx.Request[T])
	// Check application status
	// (GET /health)
	HealthGet(ctx *goservectx.Request[T])
}

type GetAuthorizationClientRequest struct {
	Body UserInfo `name:"body" json:"body" required:"true" validate:"required"`
}

// AuthorizationGenClientRequest combines all parameters for AuthorizationGen
type AuthorizationGenClientRequest struct {

	// Authorization - Header parameter
	Authorization AccessToken `name:"Authorization"  error_message:"required header param [Authorization] " header:"Authorization" required:"true" validate:"required" json:"Authorization"`

	Body UserInfo `name:"body" json:"body" required:"true" validate:"required"`
}

// DeleteClientRequest combines all parameters for Delete
type DeleteClientRequest struct {

	// filePath - Query parameter
	FilePath string `name:"filePath" error_message:"required query param [filePath]" query:"filePath" required:"true" validate:"required" json:"filePath"`
}

// ListClientRequest combines all parameters for List
type ListClientRequest struct {

	// resource - Query parameter
	Resource string `name:"resource" error_message:"required query param [resource]" query:"resource" json:"resource"`

	// Authorization - Header parameter
	Authorization AccessToken `name:"Authorization"  error_message:"required header param [Authorization] " header:"Authorization" required:"true" validate:"required" json:"Authorization"`
}

// DownloadFileClientRequest combines all parameters for DownloadFile
type DownloadFileClientRequest struct {

	// filePath - Query parameter
	FilePath string `name:"filePath" error_message:"required query param [filePath]" query:"filePath" required:"true" validate:"required" json:"filePath"`
}

// UploadFileClientRequest combines all parameters for UploadFile
type UploadFileClientRequest struct {

	// Authorization - Header parameter
	Authorization AccessToken `name:"Authorization"  error_message:"required header param [Authorization] " header:"Authorization" required:"true" validate:"required" json:"Authorization"`

	Body UploadFileMultipartBody `name:"body" json:"body" required:"true" validate:"required"`
}

type HealthGetClientRequest struct {
}

type ApiRequestService[T goservectx.Principal] interface {

	// GetAuthorization -> POST: /authorization
	GetAuthorization(request GetAuthorizationClientRequest, ctx *goservectx.Request[T])

	// AuthorizationGen -> POST: /authorization/gen
	AuthorizationGen(request AuthorizationGenClientRequest, ctx *goservectx.Request[T])

	// Delete -> DELETE: /files  required scopes ["resource:files:delete"]
	Delete(request DeleteClientRequest, ctx *goservectx.Request[T])

	// List -> GET: /files  required scopes ["resource:files:list:all"]
	List(request ListClientRequest, ctx *goservectx.Request[T])

	// DownloadFile -> GET: /files/download  required scopes ["resource:files:download"]
	DownloadFile(request DownloadFileClientRequest, ctx *goservectx.Request[T])

	// UploadFile -> POST: /files/upload  required scopes ["resource:files:upload"]
	UploadFile(request UploadFileClientRequest, ctx *goservectx.Request[T])

	// HealthGet -> GET: /health
	HealthGet(ctx *goservectx.Request[T])
}

type resourceHandlerImpl[T goservectx.Principal] struct {
	Service ApiRequestService[T]
}

// ---
func apiResourceRegister[T goservectx.Principal](server server.Api[T], handler resourceHandler[T]) {
	server.PublicRouter(handler.GetAuthorization, "/authorization", "POST")

	server.PublicRouter(handler.AuthorizationGen, "/authorization/gen", "POST")

	server.Add(handler.Delete, "/files", "DELETE", []string{"resource:files:delete"}...)

	server.Add(handler.List, "/files", "GET", []string{"resource:files:list:all"}...)

	server.Add(handler.DownloadFile, "/files/download", "GET", []string{"resource:files:download"}...)

	server.Add(handler.UploadFile, "/files/upload", "POST", []string{"resource:files:upload"}...)

	server.PublicRouter(handler.HealthGet, "/health", "GET")

}

// RequestServiceHandler registers all generated API endpoints with their corresponding service implementation.
// Generated resource:
//   - ApiRequestService.GetAuthorization
//   - ApiRequestService.AuthorizationGen
//   - ApiRequestService.Delete
//   - ApiRequestService.List
//   - ApiRequestService.DownloadFile
//   - ApiRequestService.UploadFile
//   - ApiRequestService.HealthGet
func RequestServiceHandler[T goservectx.Principal](server server.Api[T], service ApiRequestService[T]) {
	handler := &resourceHandlerImpl[T]{
		Service: service,
	}
	apiResourceRegister(server, handler)
}
