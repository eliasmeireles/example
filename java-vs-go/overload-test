#!/bin/bash

# Define ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Define default values
COUNT=1
WORK_DIR=$(pwd)
USERNAME="file-server@user.com"
PASSWORD="123456"

# Temporary files to store counters
TMP_FILE_JAVA=$(mktemp)
TMP_FILE_GO=$(mktemp)

# Initialize counters in temporary files
echo "0 0 0" > "$TMP_FILE_JAVA" # total_time, success, error
echo "0 0 0" > "$TMP_FILE_GO"   # total_time, success, error

# Function to update counters with file locking
function update_counter() {
  local tmp_file=$1
  local total_time=$2
  local success=$3
  local error=$4

  # Use file locking to prevent race conditions
  (
    flock -x 200
    read -r current_total_time current_success current_error < "$tmp_file"
    echo "$((current_total_time + total_time)) $((current_success + success)) $((current_error + error))" > "$tmp_file"
  ) 200>"$tmp_file.lock"
}

# Function to make a request and measure time
function request() {
  local port=$1
  local i=$2

  echo -e "${CYAN}Request $i/$COUNT to port $port:${NC}"

  # Measure the time taken for the authorization request
  local auth_start_time=$(date +%s%N)
  local auth_response=$(curl -s --location "http://localhost:$port/api/file-server/v1/authorization" \
    --header 'Content-Type: application/json' \
    --data-raw "{
      \"username\": \"$USERNAME\",
      \"password\": \"$PASSWORD\"
    }")
  local auth_end_time=$(date +%s%N)
  local auth_time=$(( (auth_end_time - auth_start_time) / 1000000 )) # Convert to milliseconds

  # Extract the JWT token from the response
  local jwt_token=$(echo "$auth_response" | jq -r '.jwt')

  if [ -z "$jwt_token" ] || [ "$jwt_token" == "null" ]; then
    echo -e "${RED}Failed to get JWT token for port $port${NC}"
    if [ "$port" -eq 8080 ]; then
      update_counter "$TMP_FILE_JAVA" 0 0 1
    elif [ "$port" -eq 8081 ]; then
      update_counter "$TMP_FILE_GO" 0 0 1
    fi
    return
  fi

  # Measure the time taken for the file upload request
  local upload_start_time=$(date +%s%N)
  local upload_response=$(curl -s --location "http://localhost:$port/api/file-server/v1/files/upload" \
    --header "Authorization: $jwt_token" \
    --form "resource=@\"$WORK_DIR/large-63mb.pdf\"" \
    --form 'fileName="large-file"' \
    --form 'dirName="overload-test"')
  local upload_end_time=$(date +%s%N)
  local upload_time=$(( (upload_end_time - upload_start_time) / 1000000 )) # Convert to milliseconds

  local total_time=$((auth_time + upload_time))

  # Check if the upload request was successful by looking for "fileDownloadUri" in the response
  if echo "$upload_response" | jq -e '.fileDownloadUri' > /dev/null 2>&1; then
    echo -e "${GREEN}Upload successful for port $port${NC}"
    if [ "$port" -eq 8080 ]; then
      update_counter "$TMP_FILE_JAVA" "$total_time" 1 0
    elif [ "$port" -eq 8081 ]; then
      update_counter "$TMP_FILE_GO" "$total_time" 1 0
    fi
  else
    echo -e "${RED}Upload failed for port $port${NC}"
    if [ "$port" -eq 8080 ]; then
      update_counter "$TMP_FILE_JAVA" "$total_time" 0 1
    elif [ "$port" -eq 8081 ]; then
      update_counter "$TMP_FILE_GO" "$total_time" 0 1
    fi
  fi

  echo -e "${BLUE}Authorization time for port $port: ${auth_time}ms${NC}"
  echo -e "${BLUE}Upload time for port $port: ${upload_time}ms${NC}"
  echo -e "${MAGENTA}Total time for port $port: ${total_time}ms${NC}\n-----"
}

# Parse arguments
while [[ "$#" -gt 0 ]]; do
  case $1 in
    --count) COUNT=$2; shift ;;
    *) echo -e "${RED}Unknown parameter passed: $1${NC}"; exit 1 ;;
  esac
  shift
done

# Arrays to store PIDs for parallel requests
pids=()

# Make requests in parallel to both ports
for ((i=1; i<=COUNT; i++)); do
  echo -e "${CYAN}Benchmarking request $i/$COUNT:${NC}"
  request 8080 $i & # Java Spring Boot (run in background)
  pids+=($!)       # Store PID of the background process
  request 8081 $i & # Go (run in background)
  pids+=($!)       # Store PID of the background process
done

# Wait for all background processes to complete
for pid in "${pids[@]}"; do
  wait "$pid"
done

# Read final counters from temporary files
read -r total_time_java success_java error_java < "$TMP_FILE_JAVA"
read -r total_time_go success_go error_go < "$TMP_FILE_GO"

# Calculate average time for each server
average_time_java=$(echo "scale=2; $total_time_java / $COUNT" | bc)
average_time_go=$(echo "scale=2; $total_time_go / $COUNT" | bc)

# Log benchmark results
echo -e "${CYAN}Benchmark Results:${NC}"
echo -e "${YELLOW}Java Spring Boot (port 8080):${NC}"
echo -e "  ${CYAN}Total time for $COUNT requests: ${total_time_java}ms${NC}"
echo -e "  ${CYAN}Average time per request: ${average_time_java}ms${NC}"
echo -e "  ${GREEN}Successful requests: ${success_java}${NC}"
echo -e "  ${RED}Failed requests: ${error_java}${NC}"
echo -e "${YELLOW}Go (port 8081):${NC}"
echo -e "  ${CYAN}Total time for $COUNT requests: ${total_time_go}ms"
echo -e "  ${CYAN}Average time per request: ${average_time_go}ms"
echo -e "  ${GREEN}Successful requests: ${success_go}${NC}"
echo -e "  ${RED}Failed requests: ${error_go}${NC}"

# Clean up temporary files
rm -f "$TMP_FILE_JAVA" "$TMP_FILE_GO" "$TMP_FILE_JAVA.lock" "$TMP_FILE_GO.lock"

echo -e "${GREEN}Benchmarking completed.${NC}"